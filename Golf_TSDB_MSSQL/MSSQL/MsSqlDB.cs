// Licence file C:\Users\mathi\OneDrive\Dokumenter\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace MSSQL
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Account> Accounts { get; set; } // Account
        DbSet<Asset> Assets { get; set; } // Asset
        DbSet<BondType> BondTypes { get; set; } // BondType
        DbSet<Holding> Holdings { get; set; } // Holding
        DbSet<HoldingsInAccount> HoldingsInAccounts { get; set; } // HoldingsInAccounts
        DbSet<Security> Securities { get; set; } // Security

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult>(Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Account> Accounts { get; set; } // Account
        public DbSet<Asset> Assets { get; set; } // Asset
        public DbSet<BondType> BondTypes { get; set; } // BondType
        public DbSet<Holding> Holdings { get; set; } // Holding
        public DbSet<HoldingsInAccount> HoldingsInAccounts { get; set; } // HoldingsInAccounts
        public DbSet<Security> Securities { get; set; } // Security

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                if (Environment.MachineName == "B32XL0ELTOD466S") // Allans PC
                    optionsBuilder.UseSqlServer(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Holdings;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
                else
                    optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=AHO;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AccountConfiguration());
            modelBuilder.ApplyConfiguration(new AssetConfiguration());
            modelBuilder.ApplyConfiguration(new BondTypeConfiguration());
            modelBuilder.ApplyConfiguration(new HoldingConfiguration());
            modelBuilder.ApplyConfiguration(new HoldingsInAccountConfiguration());
            modelBuilder.ApplyConfiguration(new SecurityConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Account> Accounts { get; set; } // Account
        public DbSet<Asset> Assets { get; set; } // Asset
        public DbSet<BondType> BondTypes { get; set; } // BondType
        public DbSet<Holding> Holdings { get; set; } // Holding
        public DbSet<HoldingsInAccount> HoldingsInAccounts { get; set; } // HoldingsInAccounts
        public DbSet<Security> Securities { get; set; } // Security

        public FakeMyDbContext()
        {
            _database = new FakeDatabaseFacade(new MyDbContext());

            Accounts = new FakeDbSet<Account>("AccountCode");
            Assets = new FakeDbSet<Asset>("AssetId");
            BondTypes = new FakeDbSet<BondType>("BondTypeCode");
            Holdings = new FakeDbSet<Holding>("Id");
            HoldingsInAccounts = new FakeDbSet<HoldingsInAccount>();
            Securities = new FakeDbSet<Security>("SecurityId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult>(Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray(); RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult)typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable)CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>)CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>)null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Account
    public class Account
    {
        public DateTime? LoadDate { get; set; } // LoadDate
        public string AccountCode { get; set; } // AccountCode (Primary key) (length: 20)
        public string AccountName { get; set; } // AccountName (length: 250)
        public string BaseCurrencyCode { get; set; } // BaseCurrencyCode (length: 3)
        public DateTime? OfficialLaunchDate { get; set; } // OfficialLaunchDate
        public DateTime? TerminationDate { get; set; } // TerminationDate
        public DateTime? FsaApprovalDate { get; set; } // FsaApprovalDate
        public DateTime? LiquidationDate { get; set; } // LiquidationDate
        public DateTime? MaturityDate { get; set; } // MaturityDate
        public int? SeNumber { get; set; } // SeNumber
        public int? InvestOneAccount { get; set; } // InvestOneAccount
        public int? EfaMotherFundCode { get; set; } // EfaMotherFundCode
        public string EfaShareClassCode { get; set; } // EfaShareClassCode (length: 2)
        public int? CustodianBankCode { get; set; } // CustodianBankCode
        public string CustodianBank { get; set; } // CustodianBank (length: 100)
        public int? HugoEnvironment { get; set; } // HugoEnvironment
        public int? InvestmentStrategyApproachCode { get; set; } // InvestmentStrategyApproachCode
        public string InvestmentStrategyApproach { get; set; } // InvestmentStrategyApproach (length: 100)
        public int? InvestmentStrategyConceptCode { get; set; } // InvestmentStrategyConceptCode
        public string InvestmentStrategyConcept { get; set; } // InvestmentStrategyConcept (length: 100)
        public byte? InvestmentUniverseCode { get; set; } // InvestmentUniverseCode
        public string InvestmentUniverse { get; set; } // InvestmentUniverse (length: 100)
        public bool? IsSecurityLendingAllowed { get; set; } // IsSecurityLendingAllowed
        public bool? IsEthical { get; set; } // IsEthical
        public string PoolId { get; set; } // PoolId (length: 7)
        public decimal? UnitSize { get; set; } // UnitSize
        public string DomicileCode { get; set; } // DomicileCode (length: 2)
        public byte? AssetClassCode { get; set; } // AssetClassCode
        public string AssetClass { get; set; } // AssetClass (length: 100)
        public byte? DataProviderCode { get; set; } // DataProviderCode
        public string DataProvider { get; set; } // DataProvider (length: 100)
        public short? IfrCategoryCode { get; set; } // IfrCategoryCode
        public string IfrCategory { get; set; } // IfrCategory (length: 100)
        public short? MorningstarCategoryCode { get; set; } // MorningstarCategoryCode
        public string MorningstarCategory { get; set; } // MorningstarCategory (length: 100)
        public byte? LegalFrameworkCode { get; set; } // LegalFrameworkCode
        public string LegalFramework { get; set; } // LegalFramework (length: 100)
        public byte? OwnershipTypeCode { get; set; } // OwnershipTypeCode
        public string OwnershipType { get; set; } // OwnershipType (length: 100)
        public byte? ProductTypeCode { get; set; } // ProductTypeCode
        public string ProductType { get; set; } // ProductType (length: 100)
        public byte? PricingMethodCode { get; set; } // PricingMethodCode
        public string PricingMethod { get; set; } // PricingMethod (length: 100)
        public byte? ProductFamilyCode { get; set; } // ProductFamilyCode
        public string ProductFamily { get; set; } // ProductFamily (length: 100)
        public byte? TransferAgentCode { get; set; } // TransferAgentCode
        public byte? ReportingClassificationCode { get; set; } // ReportingClassificationCode
        public string ReportingClassification { get; set; } // ReportingClassification (length: 100)
        public byte? ReportingClassification2Code { get; set; } // ReportingClassification2Code
        public string ReportingClassification2 { get; set; } // ReportingClassification2 (length: 100)
        public byte? FundUmbrellaCode { get; set; } // FundUmbrellaCode
        public string FundUmbrella { get; set; } // FundUmbrella (length: 100)
        public int? FsaFundUmbrellaCode { get; set; } // FsaFundUmbrellaCode
        public string FsaFundUmbrella { get; set; } // FsaFundUmbrella (length: 100)
        public string XsprisaIdentifier { get; set; } // XsprisaIdentifier (length: 50)
        public string FactSetIdentifier { get; set; } // FactSetIdentifier (length: 50)
        public string NavisionIdentifier { get; set; } // NavisionIdentifier (length: 50)
        public string CiciCounterPartIdentifier { get; set; } // CICICounterPartIdentifier (length: 50)
        public string ClientReferenceIdentifier { get; set; } // ClientReferenceIdentifier (length: 50)
        public string DexiaDfsIdentifier { get; set; } // DexiaDfsIdentifier (length: 50)
        public string BceeIdentifier { get; set; } // BceeIdentifier (length: 50)
        public string ReportingIdentifier { get; set; } // ReportingIdentifier (length: 50)
        public string AdminIdentifier { get; set; } // AdminIdentifier (length: 50)
        public byte? FxProviderCode { get; set; } // FxProviderCode
        public string FxProvider { get; set; } // FxProvider (length: 100)
        public byte? ManagementCompanyCode { get; set; } // ManagementCompanyCode
        public string ManagementCompany { get; set; } // ManagementCompany (length: 100)
        public byte? SubManagerCode { get; set; } // SubManagerCode
        public string SubManager { get; set; } // SubManager (length: 100)
        public string CollateralCurrencyCode { get; set; } // CollateralCurrencyCode (length: 3)
        public byte? AdministratorCode { get; set; } // AdministratorCode
        public string Administrator { get; set; } // Administrator (length: 100)
        public byte? InvestmentManagerCode { get; set; } // InvestmentManagerCode
        public string InvestmentManager { get; set; } // InvestmentManager (length: 100)
        public string BloombergAimAccountCode { get; set; } // BloombergAimAccountCode (length: 8)
        public short? BloombergAimAccountNumber { get; set; } // BloombergAimAccountNumber
        public bool? IsCurrencyHedgingAllowed { get; set; } // IsCurrencyHedgingAllowed
        public int? BenchmarkCode { get; set; } // BenchmarkCode
        public string Benchmark { get; set; } // Benchmark (length: 250)
        public string PortfolioManager { get; set; } // PortfolioManager (length: 1000)
        public bool? IsHoldingsDrillDownRequired { get; set; } // IsHoldingsDrillDownRequired
        public decimal? RecommendedHoldingPeriodInYears { get; set; } // RecommendedHoldingPeriodInYears
        public DateTime? InvestOneFirstNavDate { get; set; } // InvestOneFirstNavDate
    }

    // Asset
    public class Asset
    {
        public string AssetId { get; set; } // AssetID (Primary key) (length: 50)
        public string Isin { get; set; } // ISIN (length: 12)
        public string CompanyId { get; set; } // CompanyID (length: 100)
        public int? IsDeleted { get; set; } // IS_DELETED
        public string Name { get; set; } // Name (length: 250)
        public string ShortName { get; set; } // ShortName (length: 25)
        public string AssetGroup { get; set; } // AssetGroup (length: 20)
        public string AssetGroupNameEnglish { get; set; } // AssetGroupName_English (length: 100)
        public string AssetGroupNameDanish { get; set; } // AssetGroupName_Danish (length: 100)
        public string AssetType { get; set; } // AssetType (length: 1)
        public string AssetTypeNameEnglish { get; set; } // AssetTypeName_English (length: 100)
        public string AssetTypeNameDanish { get; set; } // AssetTypeName_Danish (length: 100)
        public string BondTypeCode { get; set; } // BondTypeCode (length: 20)
        public DateTime? IssueDate { get; set; } // IssueDate
        public DateTime? MaturityDate { get; set; } // MaturityDate
        public decimal? Coupon { get; set; } // Coupon
        public string AccrualMethodCode { get; set; } // AccrualMethodCode (length: 20)
        public string CouponFrequencyCode { get; set; } // CouponFrequencyCode (length: 20)
        public string CollateralTypeCode { get; set; } // CollateralTypeCode (length: 20)
        public bool? IsCallableBond { get; set; } // IsCallableBond
        public DateTime? NextCallDate { get; set; } // NextCallDate
        public string PaymentRankCode { get; set; } // PaymentRankCode (length: 20)
        public string GuarantyLevel { get; set; } // GuarantyLevel (length: 30)
        public string CicCode { get; set; } // CICCode (length: 4)
        public string LegalEntityIdentifier { get; set; } // LegalEntityIdentifier (length: 20)
        public string AifmdExposureReportingAssetType { get; set; } // AifmdExposureReportingAssetType (length: 16)
        public string AifmdExposureReportingSubAssetType { get; set; } // AifmdExposureReportingSubAssetType (length: 16)
        public string LcrCategory { get; set; } // LCRCategory (length: 10)
        public bool? IsCboClo { get; set; } // IsCboClo
        public bool? IsConvertibleBond { get; set; } // IsConvertibleBond
        public bool? IsInitialMarginUsed { get; set; } // IsInitialMarginUsed
        public decimal? InitialHedgerMarginLimit { get; set; } // InitialHedgerMarginLimit
        public decimal? InitialSpeculatorMarginLimit { get; set; } // InitialSpeculatorMarginLimit
        public string RiskWeight { get; set; } // RiskWeight (length: 10)
        public string LinkedAsset { get; set; } // LinkedAsset (length: 50)
        public string CompanyTicker { get; set; } // CompanyTicker (length: 50)
    }

    // BondType
    public class BondType
    {
        public string BondTypeCode { get; set; } // BondTypeCode (Primary key) (length: 12)
        public string Name { get; set; } // Name (length: 250)
        public string BondFamilyCode { get; set; } // BondFamilyCode (length: 12)
        public string NameEnglish { get; set; } // Name_English (length: 100)
        public string NameDanish { get; set; } // Name_Danish (length: 100)
    }

    // Holding
    public class Holding
    {
        public int Id { get; set; } // Id (Primary key)
        public string AccountCode { get; set; } // AccountCode (length: 20)
        public DateTime NavDate { get; set; } // NavDate
        public byte HoldingTypeId { get; set; } // HoldingTypeId
        public string HoldingTypeDanish { get; set; } // HoldingType_Danish (length: 50)
        public string HoldingTypeEnglish { get; set; } // HoldingType_English (length: 50)
        public byte HoldingSubTypeId { get; set; } // HoldingSubTypeId
        public string HoldingSubTypeDanish { get; set; } // HoldingSubType_Danish (length: 50)
        public string HoldingSubTypeEnglish { get; set; } // HoldingSubType_English (length: 50)
        public string DescriptionDanish { get; set; } // Description_Danish (length: 250)
        public string DescriptionEnglish { get; set; } // Description_English (length: 250)
        public int? SecurityId { get; set; } // SecurityId
        public string Figi { get; set; } // FIGI (length: 12)
        public string SecurityIsin { get; set; } // SecurityIsin (length: 12)
        public string BaseCurrencyCode { get; set; } // BaseCurrencyCode (length: 3)
        public string InvestmentCurrencyCode { get; set; } // InvestmentCurrencyCode (length: 3)
        public string CounterCurrencyCode { get; set; } // CounterCurrencyCode (length: 3)
        public decimal? FxRate { get; set; } // FxRate
        public decimal? NominalHolding { get; set; } // NominalHolding
        public decimal? NominalHoldingSettled { get; set; } // NominalHoldingSettled
        public decimal? NominalHoldingPending { get; set; } // NominalHoldingPending
        public decimal? ValuationPrice { get; set; } // ValuationPrice
        public decimal? AverageCostMarketValue { get; set; } // AverageCostMarketValue
        public decimal? Weight { get; set; } // Weight
        public decimal MarketValueInBaseCurrency { get; set; } // MarketValueInBaseCurrency
        public decimal? MarketValueInBaseCurrencySettled { get; set; } // MarketValueInBaseCurrencySettled
        public decimal? MarketValueInBaseCurrencyPending { get; set; } // MarketValueInBaseCurrencyPending
        public decimal? AccruedInterestInBaseCurrency { get; set; } // AccruedInterestInBaseCurrency
        public decimal? AccruedInterestInBaseCurrencySettled { get; set; } // AccruedInterestInBaseCurrencySettled
        public decimal? AccruedInterestInBaseCurrencyPending { get; set; } // AccruedInterestInBaseCurrencyPending
        public decimal? MarketValueInInvestmentCurrency { get; set; } // MarketValueInInvestmentCurrency
        public decimal? MarketValueInInvestmentCurrencySettled { get; set; } // MarketValueInInvestmentCurrencySettled
        public decimal? MarketValueInInvestmentCurrencyPending { get; set; } // MarketValueInInvestmentCurrencyPending
        public decimal? AccruedInterestInInvestmentCurrency { get; set; } // AccruedInterestInInvestmentCurrency
        public decimal? AccruedInterestInInvestmentCurrencySettled { get; set; } // AccruedInterestInInvestmentCurrencySettled
        public decimal? AccruedInterestInInvestmentCurrencyPending { get; set; } // AccruedInterestInInvestmentCurrencyPending
        public string ContractNumber { get; set; } // ContractNumber (length: 50)
        public string Leg { get; set; } // Leg (length: 1)
        public string RelatedProduct { get; set; } // RelatedProduct (length: 20)
        public string InvestmentAccount { get; set; } // InvestmentAccount (length: 20)
        public decimal? SecurityReturnValueInBaseCurrency { get; set; } // SecurityReturnValueInBaseCurrency
        public double? SecurityReturnInBaseCurrency { get; set; } // SecurityReturnInBaseCurrency
        public double? SecurityContributionToReturnInBaseCurrency { get; set; } // SecurityContributionToReturnInBaseCurrency
        public string MpAccountCode { get; set; } // MPAccountCode (length: 20)
    }

    // HoldingsInAccounts
    public class HoldingsInAccount
    {
        public string AccountCode { get; set; } // AccountCode (length: 20)
        public DateTime NavDate { get; set; } // NavDate
        public string LocalCurrencyCode { get; set; } // LocalCurrencyCode (length: 3)
        public decimal? MarketValue { get; set; } // MarketValue
        public decimal? NumberOfShare { get; set; } // NumberOfShare
        public string Name { get; set; } // Name (length: 250)
        public string BondType { get; set; } // BondType (length: 250)
        public string HoldingType { get; set; } // HoldingType (length: 50)
        public decimal? Percentage { get; set; } // Percentage
        public decimal? ValuationPrice { get; set; } // Percentage
    }

    // Security
    public class Security
    {
        public int SecurityId { get; set; } // SecurityId (Primary key)
        public string AssetId { get; set; } // AssetID (length: 20)
        public string Name { get; set; } // Name (length: 250)
        public string ShortName { get; set; } // ShortName (length: 25)
        public string Isin { get; set; } // Isin (length: 12)
        public string Figi { get; set; } // Figi (length: 12)
        public string AssetGroup { get; set; } // AssetGroup (length: 3)
        public string AssetGroupNameEnglish { get; set; } // AssetGroupName_English (length: 100)
        public string AssetGroupNameDanish { get; set; } // AssetGroupName_Danish (length: 100)
        public string AssetType { get; set; } // AssetType (length: 1)
        public string AssetTypeNameEnglish { get; set; } // AssetTypeName_English (length: 100)
        public string AssetTypeNameDanish { get; set; } // AssetTypeName_Danish (length: 100)
        public string IssueCurrency { get; set; } // IssueCurrency (length: 3)
        public string IncomeCurrency { get; set; } // IncomeCurrency (length: 3)
        public string TradeCurrency { get; set; } // TradeCurrency (length: 3)
        public string CountryOfRisk { get; set; } // CountryOfRisk (length: 2)
        public string CountryOfIssue { get; set; } // CountryOfIssue (length: 2)
        public string CountryOfTaxation { get; set; } // CountryOfTaxation (length: 2)
        public DateTime? IssueDate { get; set; } // IssueDate
        public DateTime? FirstCouponDate { get; set; } // FirstCouponDate
        public string CouponFrequency { get; set; } // CouponFrequency (length: 1)
        public string CouponFrequencyNameEnglish { get; set; } // CouponFrequencyName_English (length: 100)
        public decimal? Coupon { get; set; } // Coupon
        public DateTime? MaturityDate { get; set; } // MaturityDate
        public decimal? SinkingFactor { get; set; } // SinkingFactor
        public string MarketStatus { get; set; } // MarketStatus (length: 4)
        public string LcrCategory { get; set; } // LcrCategory (length: 10)
        public string RiskWeightSolvency { get; set; } // RiskWeightSolvency (length: 10)
        public string UnderlyingSecurity { get; set; } // UnderlyingSecurity (length: 12)
        public bool? IsCouponDeferred { get; set; } // IsCouponDeferred
        public bool? AutomaticPriceUpdate { get; set; } // AutomaticPriceUpdate
        public string PriceCode { get; set; } // PriceCode (length: 1)
        public string AccrualMethod { get; set; } // AccrualMethod (length: 1)
        public string AccrualMethodName { get; set; } // AccrualMethodName (length: 100)
        public string TaxGroup { get; set; } // TaxGroup (length: 1)
        public int? GlCode { get; set; } // GLCode
        public short? LagDays { get; set; } // LagDays
        public string BloombergCompositeCode { get; set; } // BloombergCompositeCode (length: 4)
        public string BloombergExchangeCode { get; set; } // BloombergExchangeCode (length: 4)
        public string IncomeCategoryMain { get; set; } // IncomeCategoryMain (length: 10)
        public string IncomeCategoryMainName { get; set; } // IncomeCategoryMainName (length: 100)
        public string IncomeCategorySub { get; set; } // IncomeCategorySub (length: 10)
        public string ContractType { get; set; } // ContractType (length: 2)
        public string PutCallFlag { get; set; } // PutCallFlag (length: 1)
        public decimal? StrikePrice { get; set; } // StrikePrice
        public int? LinkedSecurity { get; set; } // LinkedSecurity
        public int? ContractSize { get; set; } // ContractSize
        public DateTime? ExpirationDate { get; set; } // ExpirationDate
        public bool? IsDelisted { get; set; } // IsDelisted
        public bool? IsDefaulted { get; set; } // IsDefaulted
        public bool? IsForm13F { get; set; } // IsForm13F
        public string Form13FClass { get; set; } // Form13FClass (length: 20)
        public string BloombergUniqueIdentifier { get; set; } // BloombergUniqueIdentifier (length: 30)
        public int? Company { get; set; } // Company
        public string Exchange { get; set; } // Exchange (length: 4)
        public string Sedol { get; set; } // Sedol (length: 7)
        public string Cusip { get; set; } // Cusip (length: 9)
        public int? Units { get; set; } // Units
        public decimal? QuotationFactor { get; set; } // QuotationFactor
        public string TickerAndExchangeCode { get; set; } // TickerAndExchangeCode (length: 12)
        public string GuarantyLevel { get; set; } // GuarantyLevel (length: 30)
        public int? GuarantorCompany { get; set; } // GuarantorCompany
        public string BloombergSecurityId { get; set; } // BloombergSecurityId (length: 20)
        public string AlternatePricingSource { get; set; } // AlternatePricingSource (length: 12)
        public bool? IsOtc { get; set; } // IsOTC
        public decimal? VariationMargin { get; set; } // VariationMargin
        public decimal? TickValue { get; set; } // TickValue
        public DateTime? AccrualStartDate { get; set; } // AccrualStartDate
        public string BondType { get; set; } // BondType (length: 10)
        public string CollateralType { get; set; } // CollateralType (length: 10)
        public string PaymentRank { get; set; } // PaymentRank (length: 20)
        public bool? IsCboClo { get; set; } // IsCboClo
        public bool? IsConvertibleBond { get; set; } // IsConvertibleBond
        public bool? IsCallableBond { get; set; } // IsCallableBond
        public bool? IsPerpetual { get; set; } // IsPerpetual
        public bool? IsVariableCoupon { get; set; } // IsVariableCoupon
        public bool? IsPaymentInKind { get; set; } // IsPaymentInKind
        public string InflationIndex { get; set; } // InflationIndex (length: 100)
        public string OptionStyle { get; set; } // OptionStyle (length: 100)
        public int? HugoFundCodeId { get; set; } // HugoFundCodeID
        public int? HugoFundcodeSpx { get; set; } // HugoFundcodeSPX
        public int? HugoFundcodePm { get; set; } // HugoFundcodePM
        public DateTime? RightsStartDate { get; set; } // RightsStartDate
        public int? RightsRatio { get; set; } // RightsRatio
        public bool? IsTraceEligible { get; set; } // IsTraceEligible
        public bool? IsListed { get; set; } // IsListed
        public int? ParentCompany { get; set; } // ParentCompany
        public int? UltimateParentCompany { get; set; } // UltimateParentCompany
        public string AifmdExposureReportingAssetType { get; set; } // AifmdExposureReportingAssetType (length: 16)
        public string AifmdExposureReportingSubAssetType { get; set; } // AifmdExposureReportingSubAssetType (length: 16)
        public decimal? InitialSpeculatorMarginLimit { get; set; } // InitialSpeculatorMarginLimit
        public decimal? InitialHedgerMarginLimit { get; set; } // InitialHedgerMarginLimit
        public DateTime? NextCallDate { get; set; } // NextCallDate
        public DateTime? CouponNextResetDate { get; set; } // CouponNextResetDate
        public string TradableExchanges { get; set; } // TradableExchanges (length: 3000)
        public bool? InitialMarginUsed { get; set; } // InitialMarginUsed
        public int? VariationMarginMethod { get; set; } // VariationMarginMethod
        public int? VariationMarginType { get; set; } // VariationMarginType
        public int? SettlementMethod { get; set; } // SettlementMethod
        public short? StaticPriceValidity { get; set; } // StaticPriceValidity
        public int? GicsCode { get; set; } // GicsCode
        public int? BicsCode { get; set; } // BicsCode
        public string NaceSectorCode { get; set; } // NaceSectorCode (length: 20)
        public string NaceClassCode { get; set; } // NaceClassCode (length: 20)
        public string LegalEntityIdentifier { get; set; } // LegalEntityIdentifier (length: 20)
        public string AssetClassFocus { get; set; } // AssetClassFocus (length: 50)
        public string CicCode { get; set; } // CICCode (length: 4)
        public string RiskWeightCrr { get; set; } // RiskWeightCRR (length: 10)
        public string MortgagebondType { get; set; } // MortgagebondType (length: 10)
        public bool? IsCapped { get; set; } // IsCapped
        public bool? IsInflationIndexed { get; set; } // IsInflationIndexed
        public string BondSegment { get; set; } // BondSegment (length: 100)
        public string ReportingClassification1 { get; set; } // ReportingClassification1 (length: 100)
        public string ReportingClassification2 { get; set; } // ReportingClassification2 (length: 100)
        public string ReportingClassification3 { get; set; } // ReportingClassification3 (length: 100)
        public string LifType { get; set; } // LIFType (length: 50)
        public string LifTypePar3 { get; set; } // LIFTypePar3 (length: 50)
        public bool? FundCertificates { get; set; } // FundCertificates
        public string FundStructure { get; set; } // FundStructure (length: 50)
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Account
    public class AccountConfiguration : IEntityTypeConfiguration<Account>
    {
        public void Configure(EntityTypeBuilder<Account> builder)
        {
            builder.ToTable("Account", "dbo");
            builder.HasKey(x => x.AccountCode).HasName("PK_Account").IsClustered();

            builder.Property(x => x.LoadDate).HasColumnName(@"LoadDate").HasColumnType("datetime2").IsRequired(false);
            builder.Property(x => x.AccountCode).HasColumnName(@"AccountCode").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.AccountName).HasColumnName(@"AccountName").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.BaseCurrencyCode).HasColumnName(@"BaseCurrencyCode").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.OfficialLaunchDate).HasColumnName(@"OfficialLaunchDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.TerminationDate).HasColumnName(@"TerminationDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.FsaApprovalDate).HasColumnName(@"FsaApprovalDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.LiquidationDate).HasColumnName(@"LiquidationDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.MaturityDate).HasColumnName(@"MaturityDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.SeNumber).HasColumnName(@"SeNumber").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvestOneAccount).HasColumnName(@"InvestOneAccount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EfaMotherFundCode).HasColumnName(@"EfaMotherFundCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.EfaShareClassCode).HasColumnName(@"EfaShareClassCode").HasColumnType("char(2)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.CustodianBankCode).HasColumnName(@"CustodianBankCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.CustodianBank).HasColumnName(@"CustodianBank").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.HugoEnvironment).HasColumnName(@"HugoEnvironment").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvestmentStrategyApproachCode).HasColumnName(@"InvestmentStrategyApproachCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvestmentStrategyApproach).HasColumnName(@"InvestmentStrategyApproach").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.InvestmentStrategyConceptCode).HasColumnName(@"InvestmentStrategyConceptCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.InvestmentStrategyConcept).HasColumnName(@"InvestmentStrategyConcept").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.InvestmentUniverseCode).HasColumnName(@"InvestmentUniverseCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.InvestmentUniverse).HasColumnName(@"InvestmentUniverse").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.IsSecurityLendingAllowed).HasColumnName(@"IsSecurityLendingAllowed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsEthical).HasColumnName(@"IsEthical").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PoolId).HasColumnName(@"PoolId").HasColumnType("char(7)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.UnitSize).HasColumnName(@"UnitSize").HasColumnType("numeric(38,2)").HasPrecision(38, 2).IsRequired(false);
            builder.Property(x => x.DomicileCode).HasColumnName(@"DomicileCode").HasColumnType("char(2)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.AssetClassCode).HasColumnName(@"AssetClassCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.AssetClass).HasColumnName(@"AssetClass").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.DataProviderCode).HasColumnName(@"DataProviderCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.DataProvider).HasColumnName(@"DataProvider").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.IfrCategoryCode).HasColumnName(@"IfrCategoryCode").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.IfrCategory).HasColumnName(@"IfrCategory").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.MorningstarCategoryCode).HasColumnName(@"MorningstarCategoryCode").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.MorningstarCategory).HasColumnName(@"MorningstarCategory").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.LegalFrameworkCode).HasColumnName(@"LegalFrameworkCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.LegalFramework).HasColumnName(@"LegalFramework").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.OwnershipTypeCode).HasColumnName(@"OwnershipTypeCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.OwnershipType).HasColumnName(@"OwnershipType").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ProductTypeCode).HasColumnName(@"ProductTypeCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ProductType).HasColumnName(@"ProductType").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.PricingMethodCode).HasColumnName(@"PricingMethodCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.PricingMethod).HasColumnName(@"PricingMethod").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ProductFamilyCode).HasColumnName(@"ProductFamilyCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ProductFamily).HasColumnName(@"ProductFamily").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.TransferAgentCode).HasColumnName(@"TransferAgentCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReportingClassificationCode).HasColumnName(@"ReportingClassificationCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReportingClassification).HasColumnName(@"ReportingClassification").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ReportingClassification2Code).HasColumnName(@"ReportingClassification2Code").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ReportingClassification2).HasColumnName(@"ReportingClassification2").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.FundUmbrellaCode).HasColumnName(@"FundUmbrellaCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.FundUmbrella).HasColumnName(@"FundUmbrella").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.FsaFundUmbrellaCode).HasColumnName(@"FsaFundUmbrellaCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FsaFundUmbrella).HasColumnName(@"FsaFundUmbrella").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.XsprisaIdentifier).HasColumnName(@"XsprisaIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.FactSetIdentifier).HasColumnName(@"FactSetIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.NavisionIdentifier).HasColumnName(@"NavisionIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CiciCounterPartIdentifier).HasColumnName(@"CICICounterPartIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ClientReferenceIdentifier).HasColumnName(@"ClientReferenceIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DexiaDfsIdentifier).HasColumnName(@"DexiaDfsIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.BceeIdentifier).HasColumnName(@"BceeIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.ReportingIdentifier).HasColumnName(@"ReportingIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.AdminIdentifier).HasColumnName(@"AdminIdentifier").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.FxProviderCode).HasColumnName(@"FxProviderCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.FxProvider).HasColumnName(@"FxProvider").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ManagementCompanyCode).HasColumnName(@"ManagementCompanyCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.ManagementCompany).HasColumnName(@"ManagementCompany").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.SubManagerCode).HasColumnName(@"SubManagerCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.SubManager).HasColumnName(@"SubManager").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.CollateralCurrencyCode).HasColumnName(@"CollateralCurrencyCode").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.AdministratorCode).HasColumnName(@"AdministratorCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.Administrator).HasColumnName(@"Administrator").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.InvestmentManagerCode).HasColumnName(@"InvestmentManagerCode").HasColumnType("tinyint").IsRequired(false);
            builder.Property(x => x.InvestmentManager).HasColumnName(@"InvestmentManager").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.BloombergAimAccountCode).HasColumnName(@"BloombergAimAccountCode").HasColumnType("varchar(8)").IsRequired(false).IsUnicode(false).HasMaxLength(8);
            builder.Property(x => x.BloombergAimAccountNumber).HasColumnName(@"BloombergAimAccountNumber").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.IsCurrencyHedgingAllowed).HasColumnName(@"IsCurrencyHedgingAllowed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BenchmarkCode).HasColumnName(@"BenchmarkCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Benchmark).HasColumnName(@"Benchmark").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.PortfolioManager).HasColumnName(@"PortfolioManager").HasColumnType("varchar(1000)").IsRequired(false).IsUnicode(false).HasMaxLength(1000);
            builder.Property(x => x.IsHoldingsDrillDownRequired).HasColumnName(@"IsHoldingsDrillDownRequired").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.RecommendedHoldingPeriodInYears).HasColumnName(@"RecommendedHoldingPeriodInYears").HasColumnType("numeric(9,2)").HasPrecision(9, 2).IsRequired(false);
            builder.Property(x => x.InvestOneFirstNavDate).HasColumnName(@"InvestOneFirstNavDate").HasColumnType("date").IsRequired(false);
        }
    }

    // Asset
    public class AssetConfiguration : IEntityTypeConfiguration<Asset>
    {
        public void Configure(EntityTypeBuilder<Asset> builder)
        {
            builder.ToTable("Asset", "dbo");
            builder.HasKey(x => x.AssetId).HasName("PK_Asset").IsClustered();

            builder.Property(x => x.AssetId).HasColumnName(@"AssetID").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50).ValueGeneratedNever();
            builder.Property(x => x.Isin).HasColumnName(@"ISIN").HasColumnType("char(12)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.IsDeleted).HasColumnName(@"IS_DELETED").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.ShortName).HasColumnName(@"ShortName").HasColumnType("varchar(25)").IsRequired(false).IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.AssetGroup).HasColumnName(@"AssetGroup").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.AssetGroupNameEnglish).HasColumnName(@"AssetGroupName_English").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.AssetGroupNameDanish).HasColumnName(@"AssetGroupName_Danish").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.AssetType).HasColumnName(@"AssetType").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.AssetTypeNameEnglish).HasColumnName(@"AssetTypeName_English").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.AssetTypeNameDanish).HasColumnName(@"AssetTypeName_Danish").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.BondTypeCode).HasColumnName(@"BondTypeCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.IssueDate).HasColumnName(@"IssueDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.MaturityDate).HasColumnName(@"MaturityDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.Coupon).HasColumnName(@"Coupon").HasColumnType("numeric(38,6)").HasPrecision(38, 6).IsRequired(false);
            builder.Property(x => x.AccrualMethodCode).HasColumnName(@"AccrualMethodCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CouponFrequencyCode).HasColumnName(@"CouponFrequencyCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.CollateralTypeCode).HasColumnName(@"CollateralTypeCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.IsCallableBond).HasColumnName(@"IsCallableBond").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.NextCallDate).HasColumnName(@"NextCallDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.PaymentRankCode).HasColumnName(@"PaymentRankCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.GuarantyLevel).HasColumnName(@"GuarantyLevel").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.CicCode).HasColumnName(@"CICCode").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.LegalEntityIdentifier).HasColumnName(@"LegalEntityIdentifier").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.AifmdExposureReportingAssetType).HasColumnName(@"AifmdExposureReportingAssetType").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.AifmdExposureReportingSubAssetType).HasColumnName(@"AifmdExposureReportingSubAssetType").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.LcrCategory).HasColumnName(@"LCRCategory").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.IsCboClo).HasColumnName(@"IsCboClo").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsConvertibleBond).HasColumnName(@"IsConvertibleBond").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsInitialMarginUsed).HasColumnName(@"IsInitialMarginUsed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InitialHedgerMarginLimit).HasColumnName(@"InitialHedgerMarginLimit").HasColumnType("numeric(38,2)").HasPrecision(38, 2).IsRequired(false);
            builder.Property(x => x.InitialSpeculatorMarginLimit).HasColumnName(@"InitialSpeculatorMarginLimit").HasColumnType("numeric(38,2)").HasPrecision(38, 2).IsRequired(false);
            builder.Property(x => x.RiskWeight).HasColumnName(@"RiskWeight").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.LinkedAsset).HasColumnName(@"LinkedAsset").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CompanyTicker).HasColumnName(@"CompanyTicker").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }

    // BondType
    public class BondTypeConfiguration : IEntityTypeConfiguration<BondType>
    {
        public void Configure(EntityTypeBuilder<BondType> builder)
        {
            builder.ToTable("BondType", "dbo");
            builder.HasKey(x => x.BondTypeCode).HasName("PK_BondType").IsClustered();

            builder.Property(x => x.BondTypeCode).HasColumnName(@"BondTypeCode").HasColumnType("varchar(12)").IsRequired().IsUnicode(false).HasMaxLength(12).ValueGeneratedNever();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.BondFamilyCode).HasColumnName(@"BondFamilyCode").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.NameEnglish).HasColumnName(@"Name_English").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.NameDanish).HasColumnName(@"Name_Danish").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
        }
    }

    // Holding
    public class HoldingConfiguration : IEntityTypeConfiguration<Holding>
    {
        public void Configure(EntityTypeBuilder<Holding> builder)
        {
            builder.ToTable("Holding", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_Holding").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AccountCode).HasColumnName(@"AccountCode").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.NavDate).HasColumnName(@"NavDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.HoldingTypeId).HasColumnName(@"HoldingTypeId").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.HoldingTypeDanish).HasColumnName(@"HoldingType_Danish").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.HoldingTypeEnglish).HasColumnName(@"HoldingType_English").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.HoldingSubTypeId).HasColumnName(@"HoldingSubTypeId").HasColumnType("tinyint").IsRequired();
            builder.Property(x => x.HoldingSubTypeDanish).HasColumnName(@"HoldingSubType_Danish").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.HoldingSubTypeEnglish).HasColumnName(@"HoldingSubType_English").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.DescriptionDanish).HasColumnName(@"Description_Danish").HasColumnType("varchar(250)").IsRequired().IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.DescriptionEnglish).HasColumnName(@"Description_English").HasColumnType("varchar(250)").IsRequired().IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.SecurityId).HasColumnName(@"SecurityId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Figi).HasColumnName(@"FIGI").HasColumnType("char(12)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.SecurityIsin).HasColumnName(@"SecurityIsin").HasColumnType("char(12)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.BaseCurrencyCode).HasColumnName(@"BaseCurrencyCode").HasColumnType("char(3)").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.InvestmentCurrencyCode).HasColumnName(@"InvestmentCurrencyCode").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CounterCurrencyCode).HasColumnName(@"CounterCurrencyCode").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.FxRate).HasColumnName(@"FxRate").HasColumnType("numeric(18,8)").HasPrecision(18, 8).IsRequired(false);
            builder.Property(x => x.NominalHolding).HasColumnName(@"NominalHolding").HasColumnType("numeric(18,4)").HasPrecision(18, 4).IsRequired(false);
            builder.Property(x => x.NominalHoldingSettled).HasColumnName(@"NominalHoldingSettled").HasColumnType("numeric(18,4)").HasPrecision(18, 4).IsRequired(false);
            builder.Property(x => x.NominalHoldingPending).HasColumnName(@"NominalHoldingPending").HasColumnType("numeric(18,4)").HasPrecision(18, 4).IsRequired(false);
            builder.Property(x => x.ValuationPrice).HasColumnName(@"ValuationPrice").HasColumnType("numeric(18,6)").HasPrecision(18, 6).IsRequired(false);
            builder.Property(x => x.AverageCostMarketValue).HasColumnName(@"AverageCostMarketValue").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("numeric(18,6)").HasPrecision(18, 6).IsRequired(false);
            builder.Property(x => x.MarketValueInBaseCurrency).HasColumnName(@"MarketValueInBaseCurrency").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired();
            builder.Property(x => x.MarketValueInBaseCurrencySettled).HasColumnName(@"MarketValueInBaseCurrencySettled").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.MarketValueInBaseCurrencyPending).HasColumnName(@"MarketValueInBaseCurrencyPending").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccruedInterestInBaseCurrency).HasColumnName(@"AccruedInterestInBaseCurrency").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccruedInterestInBaseCurrencySettled).HasColumnName(@"AccruedInterestInBaseCurrencySettled").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccruedInterestInBaseCurrencyPending).HasColumnName(@"AccruedInterestInBaseCurrencyPending").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.MarketValueInInvestmentCurrency).HasColumnName(@"MarketValueInInvestmentCurrency").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.MarketValueInInvestmentCurrencySettled).HasColumnName(@"MarketValueInInvestmentCurrencySettled").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.MarketValueInInvestmentCurrencyPending).HasColumnName(@"MarketValueInInvestmentCurrencyPending").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccruedInterestInInvestmentCurrency).HasColumnName(@"AccruedInterestInInvestmentCurrency").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccruedInterestInInvestmentCurrencySettled).HasColumnName(@"AccruedInterestInInvestmentCurrencySettled").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccruedInterestInInvestmentCurrencyPending).HasColumnName(@"AccruedInterestInInvestmentCurrencyPending").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.ContractNumber).HasColumnName(@"ContractNumber").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Leg).HasColumnName(@"Leg").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.RelatedProduct).HasColumnName(@"RelatedProduct").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.InvestmentAccount).HasColumnName(@"InvestmentAccount").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.SecurityReturnValueInBaseCurrency).HasColumnName(@"SecurityReturnValueInBaseCurrency").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.SecurityReturnInBaseCurrency).HasColumnName(@"SecurityReturnInBaseCurrency").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.SecurityContributionToReturnInBaseCurrency).HasColumnName(@"SecurityContributionToReturnInBaseCurrency").HasColumnType("float").HasPrecision(53).IsRequired(false);
            builder.Property(x => x.MpAccountCode).HasColumnName(@"MPAccountCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
        }
    }

    // HoldingsInAccounts
    public class HoldingsInAccountConfiguration : IEntityTypeConfiguration<HoldingsInAccount>
    {
        public void Configure(EntityTypeBuilder<HoldingsInAccount> builder)
        {
            builder.ToView("HoldingsInAccounts", "dbo");
            builder.HasNoKey();

            builder.Property(x => x.AccountCode).HasColumnName(@"AccountCode").HasColumnType("varchar(20)").IsRequired().IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.NavDate).HasColumnName(@"NavDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.LocalCurrencyCode).HasColumnName(@"LocalCurrencyCode").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.MarketValue).HasColumnName(@"MarketValue").HasColumnType("decimal(24,2)").HasPrecision(24, 2).IsRequired(false);
            builder.Property(x => x.NumberOfShare).HasColumnName(@"NumberOfShare").HasColumnType("decimal(24,2)").HasPrecision(24, 2).IsRequired(false);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(250)").IsRequired().IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.BondType).HasColumnName(@"BondType").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.HoldingType).HasColumnName(@"HoldingType").HasColumnType("varchar(50)").IsRequired().IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.Percentage).HasColumnName(@"Percentage").HasColumnType("decimal(12,6)").HasPrecision(12, 6).IsRequired(false);
            builder.Property(x => x.ValuationPrice).HasColumnName(@"ValuationPrice").HasColumnType("numeric(18,6)").HasPrecision(18, 6).IsRequired(false);
        }
    }

    // Security
    public class SecurityConfiguration : IEntityTypeConfiguration<Security>
    {
        public void Configure(EntityTypeBuilder<Security> builder)
        {
            builder.ToTable("Security", "dbo");
            builder.HasKey(x => x.SecurityId).HasName("PK_Security").IsClustered();

            builder.Property(x => x.SecurityId).HasColumnName(@"SecurityId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.AssetId).HasColumnName(@"AssetID").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(250)").IsRequired(false).IsUnicode(false).HasMaxLength(250);
            builder.Property(x => x.ShortName).HasColumnName(@"ShortName").HasColumnType("varchar(25)").IsRequired(false).IsUnicode(false).HasMaxLength(25);
            builder.Property(x => x.Isin).HasColumnName(@"Isin").HasColumnType("char(12)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.Figi).HasColumnName(@"Figi").HasColumnType("char(12)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.AssetGroup).HasColumnName(@"AssetGroup").HasColumnType("varchar(3)").IsRequired(false).IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.AssetGroupNameEnglish).HasColumnName(@"AssetGroupName_English").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.AssetGroupNameDanish).HasColumnName(@"AssetGroupName_Danish").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.AssetType).HasColumnName(@"AssetType").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.AssetTypeNameEnglish).HasColumnName(@"AssetTypeName_English").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.AssetTypeNameDanish).HasColumnName(@"AssetTypeName_Danish").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.IssueCurrency).HasColumnName(@"IssueCurrency").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.IncomeCurrency).HasColumnName(@"IncomeCurrency").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.TradeCurrency).HasColumnName(@"TradeCurrency").HasColumnType("char(3)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(3);
            builder.Property(x => x.CountryOfRisk).HasColumnName(@"CountryOfRisk").HasColumnType("char(2)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.CountryOfIssue).HasColumnName(@"CountryOfIssue").HasColumnType("char(2)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.CountryOfTaxation).HasColumnName(@"CountryOfTaxation").HasColumnType("char(2)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.IssueDate).HasColumnName(@"IssueDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.FirstCouponDate).HasColumnName(@"FirstCouponDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.CouponFrequency).HasColumnName(@"CouponFrequency").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.CouponFrequencyNameEnglish).HasColumnName(@"CouponFrequencyName_English").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.Coupon).HasColumnName(@"Coupon").HasColumnType("numeric(9,4)").HasPrecision(9, 4).IsRequired(false);
            builder.Property(x => x.MaturityDate).HasColumnName(@"MaturityDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.SinkingFactor).HasColumnName(@"SinkingFactor").HasColumnType("numeric(18,7)").HasPrecision(18, 7).IsRequired(false);
            builder.Property(x => x.MarketStatus).HasColumnName(@"MarketStatus").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.LcrCategory).HasColumnName(@"LcrCategory").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.RiskWeightSolvency).HasColumnName(@"RiskWeightSolvency").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.UnderlyingSecurity).HasColumnName(@"UnderlyingSecurity").HasColumnType("char(12)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.IsCouponDeferred).HasColumnName(@"IsCouponDeferred").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.AutomaticPriceUpdate).HasColumnName(@"AutomaticPriceUpdate").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.PriceCode).HasColumnName(@"PriceCode").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.AccrualMethod).HasColumnName(@"AccrualMethod").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.AccrualMethodName).HasColumnName(@"AccrualMethodName").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.TaxGroup).HasColumnName(@"TaxGroup").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.GlCode).HasColumnName(@"GLCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.LagDays).HasColumnName(@"LagDays").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.BloombergCompositeCode).HasColumnName(@"BloombergCompositeCode").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.BloombergExchangeCode).HasColumnName(@"BloombergExchangeCode").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.IncomeCategoryMain).HasColumnName(@"IncomeCategoryMain").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.IncomeCategoryMainName).HasColumnName(@"IncomeCategoryMainName").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.IncomeCategorySub).HasColumnName(@"IncomeCategorySub").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.ContractType).HasColumnName(@"ContractType").HasColumnType("varchar(2)").IsRequired(false).IsUnicode(false).HasMaxLength(2);
            builder.Property(x => x.PutCallFlag).HasColumnName(@"PutCallFlag").HasColumnType("char(1)").IsRequired(false).IsFixedLength().IsUnicode(false).HasMaxLength(1);
            builder.Property(x => x.StrikePrice).HasColumnName(@"StrikePrice").HasColumnType("numeric(18,6)").HasPrecision(18, 6).IsRequired(false);
            builder.Property(x => x.LinkedSecurity).HasColumnName(@"LinkedSecurity").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ContractSize).HasColumnName(@"ContractSize").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ExpirationDate).HasColumnName(@"ExpirationDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.IsDelisted).HasColumnName(@"IsDelisted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsDefaulted).HasColumnName(@"IsDefaulted").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsForm13F).HasColumnName(@"IsForm13F").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Form13FClass).HasColumnName(@"Form13FClass").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.BloombergUniqueIdentifier).HasColumnName(@"BloombergUniqueIdentifier").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.Company).HasColumnName(@"Company").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Exchange).HasColumnName(@"Exchange").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.Sedol).HasColumnName(@"Sedol").HasColumnType("varchar(7)").IsRequired(false).IsUnicode(false).HasMaxLength(7);
            builder.Property(x => x.Cusip).HasColumnName(@"Cusip").HasColumnType("varchar(9)").IsRequired(false).IsUnicode(false).HasMaxLength(9);
            builder.Property(x => x.Units).HasColumnName(@"Units").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.QuotationFactor).HasColumnName(@"QuotationFactor").HasColumnType("numeric(18,4)").HasPrecision(18, 4).IsRequired(false);
            builder.Property(x => x.TickerAndExchangeCode).HasColumnName(@"TickerAndExchangeCode").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.GuarantyLevel).HasColumnName(@"GuarantyLevel").HasColumnType("varchar(30)").IsRequired(false).IsUnicode(false).HasMaxLength(30);
            builder.Property(x => x.GuarantorCompany).HasColumnName(@"GuarantorCompany").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BloombergSecurityId).HasColumnName(@"BloombergSecurityId").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.AlternatePricingSource).HasColumnName(@"AlternatePricingSource").HasColumnType("varchar(12)").IsRequired(false).IsUnicode(false).HasMaxLength(12);
            builder.Property(x => x.IsOtc).HasColumnName(@"IsOTC").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.VariationMargin).HasColumnName(@"VariationMargin").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.TickValue).HasColumnName(@"TickValue").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.AccrualStartDate).HasColumnName(@"AccrualStartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.BondType).HasColumnName(@"BondType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.CollateralType).HasColumnName(@"CollateralType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.PaymentRank).HasColumnName(@"PaymentRank").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.IsCboClo).HasColumnName(@"IsCboClo").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsConvertibleBond).HasColumnName(@"IsConvertibleBond").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsCallableBond).HasColumnName(@"IsCallableBond").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsPerpetual).HasColumnName(@"IsPerpetual").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsVariableCoupon).HasColumnName(@"IsVariableCoupon").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsPaymentInKind).HasColumnName(@"IsPaymentInKind").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.InflationIndex).HasColumnName(@"InflationIndex").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.OptionStyle).HasColumnName(@"OptionStyle").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.HugoFundCodeId).HasColumnName(@"HugoFundCodeID").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HugoFundcodeSpx).HasColumnName(@"HugoFundcodeSPX").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.HugoFundcodePm).HasColumnName(@"HugoFundcodePM").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.RightsStartDate).HasColumnName(@"RightsStartDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.RightsRatio).HasColumnName(@"RightsRatio").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IsTraceEligible).HasColumnName(@"IsTraceEligible").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsListed).HasColumnName(@"IsListed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.ParentCompany).HasColumnName(@"ParentCompany").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UltimateParentCompany).HasColumnName(@"UltimateParentCompany").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.AifmdExposureReportingAssetType).HasColumnName(@"AifmdExposureReportingAssetType").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.AifmdExposureReportingSubAssetType).HasColumnName(@"AifmdExposureReportingSubAssetType").HasColumnType("varchar(16)").IsRequired(false).IsUnicode(false).HasMaxLength(16);
            builder.Property(x => x.InitialSpeculatorMarginLimit).HasColumnName(@"InitialSpeculatorMarginLimit").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.InitialHedgerMarginLimit).HasColumnName(@"InitialHedgerMarginLimit").HasColumnType("numeric(18,2)").HasPrecision(18, 2).IsRequired(false);
            builder.Property(x => x.NextCallDate).HasColumnName(@"NextCallDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.CouponNextResetDate).HasColumnName(@"CouponNextResetDate").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.TradableExchanges).HasColumnName(@"TradableExchanges").HasColumnType("varchar(3000)").IsRequired(false).IsUnicode(false).HasMaxLength(3000);
            builder.Property(x => x.InitialMarginUsed).HasColumnName(@"InitialMarginUsed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.VariationMarginMethod).HasColumnName(@"VariationMarginMethod").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.VariationMarginType).HasColumnName(@"VariationMarginType").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.SettlementMethod).HasColumnName(@"SettlementMethod").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.StaticPriceValidity).HasColumnName(@"StaticPriceValidity").HasColumnType("smallint").IsRequired(false);
            builder.Property(x => x.GicsCode).HasColumnName(@"GicsCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BicsCode).HasColumnName(@"BicsCode").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.NaceSectorCode).HasColumnName(@"NaceSectorCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.NaceClassCode).HasColumnName(@"NaceClassCode").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.LegalEntityIdentifier).HasColumnName(@"LegalEntityIdentifier").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.AssetClassFocus).HasColumnName(@"AssetClassFocus").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.CicCode).HasColumnName(@"CICCode").HasColumnType("varchar(4)").IsRequired(false).IsUnicode(false).HasMaxLength(4);
            builder.Property(x => x.RiskWeightCrr).HasColumnName(@"RiskWeightCRR").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.MortgagebondType).HasColumnName(@"MortgagebondType").HasColumnType("varchar(10)").IsRequired(false).IsUnicode(false).HasMaxLength(10);
            builder.Property(x => x.IsCapped).HasColumnName(@"IsCapped").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsInflationIndexed).HasColumnName(@"IsInflationIndexed").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.BondSegment).HasColumnName(@"BondSegment").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ReportingClassification1).HasColumnName(@"ReportingClassification1").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ReportingClassification2).HasColumnName(@"ReportingClassification2").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.ReportingClassification3).HasColumnName(@"ReportingClassification3").HasColumnType("varchar(100)").IsRequired(false).IsUnicode(false).HasMaxLength(100);
            builder.Property(x => x.LifType).HasColumnName(@"LIFType").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.LifTypePar3).HasColumnName(@"LIFTypePar3").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.FundCertificates).HasColumnName(@"FundCertificates").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.FundStructure).HasColumnName(@"FundStructure").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
        }
    }


    #endregion

}
// </auto-generated>
